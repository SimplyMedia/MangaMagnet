using System.Text;
using System.Xml;
using System.Xml.Serialization;
using ExtendedXmlSerializer;
using ExtendedXmlSerializer.Configuration;
using MangaMagnet.Core.CBZ.ComicInfo.XML;
using MangaMagnet.Core.Database;
using Microsoft.Extensions.Logging;

namespace MangaMagnet.Core.CBZ.ComicInfo;

public class ComicInfoService(ILogger<ComicInfoService> logger)
{
	private readonly IExtendedXmlSerializer _serializer = new ConfigurationContainer()
		.Emit(EmitBehaviors.WhenModified)
		.UseOptimizedNamespaces()
		.Create();

	public XmlComicInfo Create(List<string> pagePaths, string scanlationGroup, string? chapterTitle, double? chapter, int? volume, DateTimeOffset? uploadedAt, MangaMetadata metadata, ComicInfoVersion version)
	{
		var pages = pagePaths
			.Select(path => new FileInfo(path))
			.Select(file => new PageInfo { Image = int.Parse(file.Name.Split(".").First()), ImageSize = file.Length, })
			.ToList();

		var comicInfo = new ComicInfo
		{
			Title = chapterTitle,
			Series = metadata.DisplayTitle,
			AlternateSeries = string.Join(",", metadata.Aliases),
			Number = chapter?.ToString(),
			Volume = volume ?? 0,
			Summary = metadata.Description,
			Year = uploadedAt?.Year ?? 0,
			Month = uploadedAt?.Month ?? 0,
			Day = uploadedAt?.Day ?? 0,
			Writer = metadata.Author,
			Penciller = metadata.Artist,
			Genre = string.Join(",", metadata.Genres),
			PageCount = pages.Count,
			LanguageISO = "en",
			Pages = pages,
			Notes = "Generated by MangaMagnet v0.0.1 (https://github.com/SimplyMedia/MangaMagnet)",
			ScanInformation = scanlationGroup,
		};

		var wantedVersion = version switch
		{
			ComicInfoVersion.V1 => new Version(1, 0, 0),
			ComicInfoVersion.V2 => new Version(2, 0 , 0),
			ComicInfoVersion.V2_1 => new Version(2, 1, 0),
			_ => throw new ArgumentOutOfRangeException(nameof(version), version, null)
		};

		return comicInfo.GetForVersion(wantedVersion);
	}

	public async Task WriteAsync(XmlComicInfo comicInfo, string outputDirectory, CancellationToken cancellationToken = default)
	{
		var path = Path.Combine(outputDirectory, "ComicInfo.xml");

		var document = await Task.Run(() => _serializer.Serialize(new XmlWriterSettings {Indent = false, OmitXmlDeclaration = true}, comicInfo), cancellationToken);

		await using var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write, FileShare.None, 4096, true);

		await fileStream.WriteAsync(Encoding.UTF8.GetBytes(document), cancellationToken);
		await fileStream.FlushAsync(cancellationToken);
	}
}
